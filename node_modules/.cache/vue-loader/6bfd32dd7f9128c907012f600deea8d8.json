{"remainingRequest":"C:\\Users\\thejo\\Videos\\Examen\\examencaoa\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\thejo\\Videos\\Examen\\examencaoa\\node_modules\\primevue\\components\\dropdown\\Dropdown.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"C:\\Users\\thejo\\Videos\\Examen\\examencaoa\\node_modules\\primevue\\components\\dropdown\\Dropdown.vue","mtime":499162500000},{"path":"C:\\Users\\thejo\\Videos\\Examen\\examencaoa\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\thejo\\Videos\\Examen\\examencaoa\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\thejo\\Videos\\Examen\\examencaoa\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\thejo\\Videos\\Examen\\examencaoa\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\thejo\\Videos\\Examen\\examencaoa\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5wLWRyb3Bkb3duIHsKICAgIGRpc3BsYXk6IGlubGluZS1ibG9jazsKICAgIHBvc2l0aW9uOiByZWxhdGl2ZTsKICAgIGN1cnNvcjogcG9pbnRlcjsKICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7Cn0KCi5wLWRyb3Bkb3duIC5wLWRyb3Bkb3duLWNsZWFyLWljb24gewogICAgcG9zaXRpb246IGFic29sdXRlOwogICAgcmlnaHQ6IDJlbTsKICAgIHRvcDogNTAlOwogICAgZm9udC1zaXplOiAxZW07CiAgICBoZWlnaHQ6IDFlbTsKICAgIG1hcmdpbi10b3A6IC0uNWVtOwp9CgoucC1kcm9wZG93biAucC1kcm9wZG93bi10cmlnZ2VyIHsKICAgIGJvcmRlci1yaWdodDogbm9uZTsKICAgIGJvcmRlci10b3A6IG5vbmU7CiAgICBib3JkZXItYm90dG9tOiBub25lOwogICAgY3Vyc29yOiBwb2ludGVyOwogICAgd2lkdGg6IDEuNWVtOwogICAgaGVpZ2h0OiAxMDAlOwogICAgcG9zaXRpb246IGFic29sdXRlOwogICAgcmlnaHQ6IDA7CiAgICB0b3A6IDA7CiAgICBwYWRkaW5nOiAwIC4yNWVtOwp9CgoucC1kcm9wZG93biAucC1kcm9wZG93bi10cmlnZ2VyIC5wLWRyb3Bkb3duLXRyaWdnZXItaWNvbiB7CiAgICB0b3A6IDUwJTsKICAgIGxlZnQ6IDUwJTsKICAgIG1hcmdpbi10b3A6IC0uNWVtOwogICAgbWFyZ2luLWxlZnQ6IC0uNWVtOwogICAgcG9zaXRpb246IGFic29sdXRlOwp9CgoucC1kcm9wZG93biAucC1kcm9wZG93bi1sYWJlbCAgewogICAgZGlzcGxheTogYmxvY2s7CiAgICBib3JkZXI6IG5vbmU7CiAgICB3aGl0ZS1zcGFjZTogbm93cmFwOwogICAgb3ZlcmZsb3c6IGhpZGRlbjsKICAgIGZvbnQtd2VpZ2h0OiBub3JtYWw7CiAgICB3aWR0aDogMTAwJTsKICAgIHBhZGRpbmctcmlnaHQ6IDEuNWVtOwp9CgoucC1kcm9wZG93biAucC1kcm9wZG93bi1pdGVtLWVtcHR5LAoucC1kcm9wZG93biAucC1kcm9wZG93bi1sYWJlbC1lbXB0eSB7CiAgICBvdmVyZmxvdzogaGlkZGVuOwogICAgdmlzaWJpbGl0eTogaGlkZGVuOwp9CgoucC1kcm9wZG93bi5wLWRpc2FibGVkIC5wLWRyb3Bkb3duLXRyaWdnZXIsCi5wLWRyb3Bkb3duLnAtZGlzYWJsZWQgLnAtZHJvcGRvd24tbGFiZWwgewogICAgY3Vyc29yOiBkZWZhdWx0Owp9CgoucC1kcm9wZG93biBsYWJlbC5wLWRyb3Bkb3duLWxhYmVsICB7CiAgICBjdXJzb3I6IHBvaW50ZXI7Cn0KCi5wLWRyb3Bkb3duIGlucHV0LnAtZHJvcGRvd24tbGFiZWwgIHsKICAgIGN1cnNvcjogZGVmYXVsdDsKfQoKLnAtZHJvcGRvd24gLnAtZHJvcGRvd24tcGFuZWwgewogICAgbWluLXdpZHRoOiAxMDAlOwogICAgei1pbmRleDogMTsKfQoKLnAtZHJvcGRvd24tcGFuZWwgewogICAgcG9zaXRpb246IGFic29sdXRlOwogICAgaGVpZ2h0OiBhdXRvOwp9CgoucC1kcm9wZG93bi1wYW5lbCAucC1kcm9wZG93bi1pdGVtcy13cmFwcGVyIHsKICAgIG92ZXJmbG93OiBhdXRvOwp9CgoucC1kcm9wZG93bi1wYW5lbCAucC1kcm9wZG93bi1pdGVtIHsKICAgIGZvbnQtd2VpZ2h0OiBub3JtYWw7CiAgICBib3JkZXI6IDAgbm9uZTsKICAgIGN1cnNvcjogcG9pbnRlcjsKICAgIG1hcmdpbjogMXB4IDA7CiAgICBwYWRkaW5nOiAuMTI1ZW0gLjI1ZW07CiAgICB0ZXh0LWFsaWduOiBsZWZ0Owp9CgoucC1kcm9wZG93bi1wYW5lbCAucC1kcm9wZG93bi1pdGVtLWdyb3VwIHsKICAgIGZvbnQtd2VpZ2h0OiBib2xkOwp9CgoucC1kcm9wZG93bi1wYW5lbCAucC1kcm9wZG93bi1saXN0IHsKICAgIHBhZGRpbmc6IDAuNGVtOwogICAgYm9yZGVyOiAwIG5vbmU7CiAgICBtYXJnaW46IDA7CiAgICBsaXN0LXN0eWxlLXR5cGU6IG5vbmU7Cn0KCi5wLWRyb3Bkb3duLXBhbmVsIC5wLWRyb3Bkb3duLWZpbHRlciB7CiAgICB3aWR0aDogMTAwJTsKICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7CiAgICBwYWRkaW5nLXJpZ2h0OiAxLjVlbTsKfQoKLnAtZHJvcGRvd24tcGFuZWwgLnAtZHJvcGRvd24tZmlsdGVyLWNvbnRhaW5lciB7CiAgICBwb3NpdGlvbjogcmVsYXRpdmU7CiAgICBtYXJnaW46IDA7CiAgICBwYWRkaW5nOiAwLjRlbTsKICAgIGRpc3BsYXk6IGlubGluZS1ibG9jazsKfQoKLnAtZHJvcGRvd24tcGFuZWwgLnAtZHJvcGRvd24tZmlsdGVyLWNvbnRhaW5lciAucC1kcm9wZG93bi1maWx0ZXItaWNvbiB7CiAgICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgICB0b3A6IC44ZW07CiAgICByaWdodDogMWVtOwp9CgovKiogRHJvcGRvd24gKiovCi5wLWZsdWlkIC5wLWRyb3Bkb3duIHsKICAgIHdpZHRoOiAxMDAlOwp9Cg=="},{"version":3,"sources":["Dropdown.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAscfile":"Dropdown.vue","sourceRoot":"node_modules/primevue/components/dropdown","sourcesContent":["<template>\n    <div ref=\"container\" :class=\"containerClass\" @click=\"onClick($event)\">\n        <div class=\"p-hidden-accessible\">\n            <input ref=\"focusInput\" type=\"text\" readonly :disabled=\"disabled\" @focus=\"onFocus\" @blur=\"onBlur\" @keydown=\"onKeyDown\" :tabindex=\"tabindex\"\n                aria-haspopup=\"listbox\" :aria-expanded=\"overlayVisible\" :aria-labelledby=\"ariaLabelledBy\"/>\n        </div>\n        <input v-if=\"editable\" type=\"text\" class=\"p-dropdown-label p-inputtext\" :disabled=\"disabled\" @focus=\"onFocus\" @blur=\"onBlur\" :placeholder=\"placeholder\" :value=\"editableInputValue\" @input=\"onEditableInput\"\n            aria-haspopup=\"listbox\" :aria-expanded=\"overlayVisible\">\n        <label v-if=\"!editable\" :class=\"labelClass\">\n            <slot name=\"value\" :value=\"value\" :placeholder=\"placeholder\">\n                {{label}}\n            </slot>\n        </label>\n        <i v-if=\"showClear && value != null\" class=\"p-dropdown-clear-icon pi pi-times\" @click=\"onClearClick($event)\"></i>\n        <div class=\"p-dropdown-trigger\" role=\"button\" aria-haspopup=\"listbox\" :aria-expanded=\"overlayVisible\">\n            <span class=\"p-dropdown-trigger-icon pi pi-chevron-down p-clickable\"></span>\n        </div>\n        <transition name=\"p-input-overlay\" @enter=\"onOverlayEnter\" @leave=\"onOverlayLeave\">\n            <div ref=\"overlay\" class=\"p-dropdown-panel\" v-if=\"overlayVisible\">\n                <div v-if=\"filter\" class=\"p-dropdown-filter-container\">\n                    <input type=\"text\" ref=\"filterInput\" v-model=\"filterValue\" autoComplete=\"off\" class=\"p-dropdown-filter p-inputtext p-component\" :placeholder=\"filterPlaceholder\" @keydown=\"onFilterKeyDown\" />\n                    <span class=\"p-dropdown-filter-icon pi pi-search\"></span>\n                </div>\n                <div ref=\"itemsWrapper\" class=\"p-dropdown-items-wrapper\" :style=\"{'max-height': scrollHeight}\">\n                    <ul class=\"p-dropdown-items p-dropdown-list p-component\" role=\"listbox\">\n                        <li v-for=\"(option, i) of visibleOptions\" :class=\"['p-dropdown-item', {'p-highlight': isSelected(option), 'p-disabled': isOptionDisabled(option)}]\"\n                            :aria-label=\"getOptionLabel(option)\" :key=\"getOptionRenderKey(option)\" @click=\"onOptionSelect($event, option)\" role=\"option\" :aria-selected=\"isSelected(option)\">\n                            <slot name=\"option\" :option=\"option\" :index=\"i\">\n                                {{getOptionLabel(option)}}\n                            </slot>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </transition>\n    </div>\n</template>\n\n<script>\nimport ObjectUtils from '../utils/ObjectUtils';\nimport DomHandler from '../utils/DomHandler';\n\nexport default {\n    props: {\n        value: null,\n        options: Array,\n        optionLabel: null,\n        optionValue: null,\n        optionDisabled: null,\n\t\tscrollHeight: {\n\t\t\ttype: String,\n\t\t\tdefault: '200px'\n\t\t},\n\t\tfilter: Boolean,\n        filterPlaceholder: String,\n        filterLocale: String,\n\t\teditable: Boolean,\n\t\tplaceholder: String,\n\t\tdisabled: Boolean,\n        dataKey: null,\n\t\tshowClear: Boolean,\n        tabindex: String,\n        ariaLabelledBy: null,\n        appendTo: {\n            type: String,\n            default: null\n        }\n    },\n    data() {\n        return {\n            focused: false,\n            filterValue: null,\n            overlayVisible: false\n        };\n    },\n    outsideClickListener: null,\n    searchTimeout: null,\n    currentSearchChar: null,\n    previousSearchChar: null,\n    searchValue: null,\n    beforeDestroy() {\n        this.restoreAppend();\n        this.unbindOutsideClickListener();\n    },\n    updated() {\n        if (this.overlayVisible && this.filterValue) {\n            this.alignOverlay();\n        }\n    },\n    methods: {\n        getOptionLabel(option) {\n            return this.optionLabel ? ObjectUtils.resolveFieldData(option, this.optionLabel) : option;\n        },\n        getOptionValue(option) {\n            return this.optionValue ? ObjectUtils.resolveFieldData(option, this.optionValue) : option;\n        },\n        getOptionRenderKey(option) {\n            return this.dataKey ? ObjectUtils.resolveFieldData(option, this.dataKey) : this.getOptionLabel(option);\n        },\n        isOptionDisabled(option) {\n            return this.optionDisabled ? ObjectUtils.resolveFieldData(option, this.optionDisabled) : false;\n        },\n        getSelectedOption() {\n            let selectedOption;\n\n            if (this.value != null && this.options) {\n                for (let option of this.options) {\n                    if ((ObjectUtils.equals(this.value, this.getOptionValue(option), this.equalityKey))) {\n                        selectedOption = option;\n                        break;\n                    }\n                }\n            }\n\n            return selectedOption;\n        },\n        isSelected(option) {\n            return ObjectUtils.equals(this.value, this.getOptionValue(option), this.equalityKey);\n        },\n        getSelectedOptionIndex() {\n            let selectedOptionIndex = -1;\n\n            if (this.value != null && this.visibleOptions) {\n                for (let i = 0; i < this.visibleOptions.length; i++) {\n                    if ((ObjectUtils.equals(this.value, this.getOptionValue(this.visibleOptions[i]), this.equalityKey))) {\n                        selectedOptionIndex = i;\n                        break;\n                    }\n                }\n            }\n\n            return selectedOptionIndex;\n        },\n        show() {\n            this.$emit('before-show');\n            this.overlayVisible = true;\n        },\n        hide() {\n            this.$emit('before-hide');\n            this.overlayVisible = false;\n        },\n        onFocus() {\n            this.focused = true;\n        },\n        onBlur() {\n            this.focused = false;\n        },\n        onKeyDown(event) {\n            switch(event.which) {\n                //down\n                case 40:\n                    this.onDownKey(event);\n                break;\n\n                //up\n                case 38:\n                    this.onUpKey(event);\n                break;\n\n                //space\n                case 32:\n                    if (!this.overlayVisible) {\n                        this.show();\n                        event.preventDefault();\n                    }\n                break;\n\n                //enter and escape\n                case 13:\n                case 27:\n                    if (this.overlayVisible) {\n                        this.hide();\n                        event.preventDefault();\n                    }\n                break;\n\n                //tab\n                case 9:\n                    this.hide();\n                break;\n\n                default:\n                    this.search(event);\n                break;\n            }\n        },\n        onFilterKeyDown(event) {\n            switch (event.which) {\n                //down\n                case 40:\n                    this.onDownKey(event);\n                    break;\n\n                //up\n                case 38:\n                    this.onUpKey(event);\n                    break;\n\n                //enter and escape\n                case 13:\n                case 27:\n                    this.overlayVisible = false;\n                    event.preventDefault();\n                break;\n\n                default:\n                break;\n            }\n        },\n        onDownKey(event) {\n            if (this.visibleOptions) {\n                if (!this.overlayVisible && event.altKey) {\n                    this.show();\n                }\n                else {\n                    let nextOption = this.findNextOption(this.getSelectedOptionIndex());\n\n                    if (nextOption) {\n                        this.updateModel(event, this.getOptionValue(nextOption));\n                    }\n                }\n            }\n\n            event.preventDefault();\n        },\n        onUpKey(event) {\n            if (this.visibleOptions) {\n                let prevOption = this.findPrevOption(this.getSelectedOptionIndex());\n\n                if (prevOption) {\n                    this.updateModel(event, this.getOptionValue(prevOption));\n                }\n            }\n\n            event.preventDefault();\n        },\n        findNextOption(index) {\n            let i = index + 1;\n            if (i === this.visibleOptions.length) {\n                return null;\n            }\n\n            let option = this.visibleOptions[i];\n            if (this.isOptionDisabled(option))\n                return this.findNextOption(i);\n            else\n                return option;\n\n        },\n        findPrevOption(index) {\n            let i = index - 1;\n            if (i < 0) {\n                return null;\n            }\n\n            let option = this.visibleOptions[i];\n            if (this.isOptionDisabled(option))\n                return this.findPrevOption(i);\n            else\n                return option;\n        },\n        onClearClick(event) {\n            this.updateModel(event, null);\n        },\n        onClick(event) {\n            if (this.disabled) {\n                return;\n            }\n\n            if (DomHandler.hasClass(event.target, 'p-dropdown-clear-icon') || event.target.tagName === 'INPUT') {\n                return;\n            }\n            else if (!this.$refs.overlay || !this.$refs.overlay.contains(event.target)) {\n                if (this.overlayVisible)\n                    this.hide();\n                else\n                    this.show();\n\n                this.$refs.focusInput.focus();\n            }\n        },\n        onOptionSelect(event, option) {\n            let value = this.getOptionValue(option);\n            this.updateModel(event, value);\n            this.$refs.focusInput.focus();\n\n            setTimeout(() => {\n                this.hide();\n            }, 100);\n        },\n        onEditableInput(event) {\n            this.$emit('input', event.target.value);\n        },\n        onOverlayEnter() {\n            this.appendContainer();\n            this.alignOverlay();\n            this.bindOutsideClickListener();\n\n            if (this.filter) {\n                this.$refs.filterInput.focus();\n            }\n\n            this.$emit('show');\n        },\n        onOverlayLeave() {\n            this.unbindOutsideClickListener();\n            this.$emit('hide');\n        },\n        alignOverlay() {\n            if (this.appendTo) {\n                DomHandler.absolutePosition(this.$refs.overlay, this.$refs.container);\n                this.$refs.overlay.style.minWidth = DomHandler.getOuterWidth(this.$refs.container) + 'px';\n            } else {\n                DomHandler.relativePosition(this.$refs.overlay, this.$refs.container);\n            }\n        },\n        updateModel(event, value) {\n            this.$emit('input', value);\n            this.$emit('change', {originalEvent: event, value: value});\n        },\n        bindOutsideClickListener() {\n            if (!this.outsideClickListener) {\n                this.outsideClickListener = (event) => {\n                    if (this.overlayVisible && this.$refs.overlay && !this.$refs.container.contains(event.target)) {\n                        this.hide();\n                    }\n                };\n                document.addEventListener('click', this.outsideClickListener);\n            }\n        },\n        unbindOutsideClickListener() {\n            if (this.outsideClickListener) {\n                document.removeEventListener('click', this.outsideClickListener);\n                this.outsideClickListener = null;\n            }\n        },\n        search(event) {\n            if (!this.visibleOptions) {\n                return;\n            }\n\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            const char = String.fromCharCode(event.keyCode);\n            this.previousSearchChar = this.currentSearchChar;\n            this.currentSearchChar = char;\n\n            if (this.previousSearchChar === this.currentSearchChar)\n                this.searchValue = this.currentSearchChar;\n            else\n                this.searchValue = this.searchValue ? this.searchValue + char : char;\n\n            let searchIndex = this.getSelectedOptionIndex();\n            let newOption = this.searchOption(++searchIndex);\n\n            if (newOption) {\n                this.updateModel(event, this.getOptionValue(newOption));\n            }\n\n            this.searchTimeout = setTimeout(() => {\n                this.searchValue = null;\n            }, 250);\n        },\n        searchOption(index) {\n            let option;\n\n            if (this.searchValue) {\n                option = this.searchOptionInRange(index, this.visibleOptions.length);\n\n                if (!option) {\n                    option = this.searchOptionInRange(0, index);\n                }\n            }\n\n            return option;\n        },\n        searchOptionInRange(start, end) {\n            for (let i = start; i < end; i++) {\n                let opt = this.visibleOptions[i];\n                let label = this.getOptionLabel(opt).toLocaleLowerCase(this.filterLocale);\n                if (label.startsWith(this.searchValue.toLocaleLowerCase(this.filterLocale))) {\n                    return opt;\n                }\n            }\n\n            return null;\n        },\n        appendContainer() {\n            if (this.appendTo) {\n                if (this.appendTo === 'body')\n                    document.body.appendChild(this.$refs.overlay);\n                else\n                    document.getElementById(this.appendTo).appendChild(this.$refs.overlay);\n            }\n        },\n        restoreAppend() {\n            if (this.$refs.overlay && this.appendTo) {\n                if (this.appendTo === 'body')\n                    document.body.removeChild(this.$refs.overlay);\n                else\n                    document.getElementById(this.appendTo).removeChild(this.$refs.overlay);\n            }\n        }\n    },\n    computed: {\n        visibleOptions() {\n            if (this.filterValue && this.filterValue.trim().length > 0)\n                return this.options.filter(option => this.getOptionLabel(option).toLocaleLowerCase(this.filterLocale).indexOf(this.filterValue.toLocaleLowerCase(this.filterLocale)) > -1);\n            else\n                return this.options;\n        },\n        containerClass() {\n            return [\n                'p-dropdown p-component p-unselectable-text',\n                {\n                    'p-disabled': this.disabled,\n                    'p-dropdown-clearable': this.showClear && !this.disabled,\n                    'p-focus': this.focused\n                }\n            ];\n        },\n        labelClass() {\n            return [\n                'p-dropdown-label p-inputtext',\n                {\n                    'p-placeholder': this.label === this.placeholder,\n                    'p-dropdown-label-empty': !this.$scopedSlots['value'] && (this.label === 'p-emptylabel' || this.label.length === 0)\n                }\n            ];\n        },\n        label() {\n            let selectedOption = this.getSelectedOption();\n            if (selectedOption)\n                return this.getOptionLabel(selectedOption);\n            else\n                return this.placeholder||'p-emptylabel';\n        },\n        editableInputValue() {\n            let selectedOption = this.getSelectedOption();\n            if (selectedOption)\n                return this.getOptionLabel(selectedOption);\n            else\n                return this.value;\n        },\n        equalityKey() {\n            return this.optionValue ? null : this.dataKey;\n        }\n    }\n}\n</script>\n\n<style>\n.p-dropdown {\n    display: inline-block;\n    position: relative;\n    cursor: pointer;\n    vertical-align: middle;\n}\n\n.p-dropdown .p-dropdown-clear-icon {\n    position: absolute;\n    right: 2em;\n    top: 50%;\n    font-size: 1em;\n    height: 1em;\n    margin-top: -.5em;\n}\n\n.p-dropdown .p-dropdown-trigger {\n    border-right: none;\n    border-top: none;\n    border-bottom: none;\n    cursor: pointer;\n    width: 1.5em;\n    height: 100%;\n    position: absolute;\n    right: 0;\n    top: 0;\n    padding: 0 .25em;\n}\n\n.p-dropdown .p-dropdown-trigger .p-dropdown-trigger-icon {\n    top: 50%;\n    left: 50%;\n    margin-top: -.5em;\n    margin-left: -.5em;\n    position: absolute;\n}\n\n.p-dropdown .p-dropdown-label  {\n    display: block;\n    border: none;\n    white-space: nowrap;\n    overflow: hidden;\n    font-weight: normal;\n    width: 100%;\n    padding-right: 1.5em;\n}\n\n.p-dropdown .p-dropdown-item-empty,\n.p-dropdown .p-dropdown-label-empty {\n    overflow: hidden;\n    visibility: hidden;\n}\n\n.p-dropdown.p-disabled .p-dropdown-trigger,\n.p-dropdown.p-disabled .p-dropdown-label {\n    cursor: default;\n}\n\n.p-dropdown label.p-dropdown-label  {\n    cursor: pointer;\n}\n\n.p-dropdown input.p-dropdown-label  {\n    cursor: default;\n}\n\n.p-dropdown .p-dropdown-panel {\n    min-width: 100%;\n    z-index: 1;\n}\n\n.p-dropdown-panel {\n    position: absolute;\n    height: auto;\n}\n\n.p-dropdown-panel .p-dropdown-items-wrapper {\n    overflow: auto;\n}\n\n.p-dropdown-panel .p-dropdown-item {\n    font-weight: normal;\n    border: 0 none;\n    cursor: pointer;\n    margin: 1px 0;\n    padding: .125em .25em;\n    text-align: left;\n}\n\n.p-dropdown-panel .p-dropdown-item-group {\n    font-weight: bold;\n}\n\n.p-dropdown-panel .p-dropdown-list {\n    padding: 0.4em;\n    border: 0 none;\n    margin: 0;\n    list-style-type: none;\n}\n\n.p-dropdown-panel .p-dropdown-filter {\n    width: 100%;\n    box-sizing: border-box;\n    padding-right: 1.5em;\n}\n\n.p-dropdown-panel .p-dropdown-filter-container {\n    position: relative;\n    margin: 0;\n    padding: 0.4em;\n    display: inline-block;\n}\n\n.p-dropdown-panel .p-dropdown-filter-container .p-dropdown-filter-icon {\n    position: absolute;\n    top: .8em;\n    right: 1em;\n}\n\n/** Dropdown **/\n.p-fluid .p-dropdown {\n    width: 100%;\n}\n</style>"]}]}